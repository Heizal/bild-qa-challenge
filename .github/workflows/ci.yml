name: Android UI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ui-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      TEST_EMAIL: ${{ secrets.TEST_EMAIL }}
      TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
      DEVICE_NAME: ${{ secrets.DEVICE_NAME }}
      PLATFORM_NAME: ${{ secrets.PLATFORM_NAME }}
      APP_PACKAGE: ${{ secrets.APP_PACKAGE }}
      APP_ACTIVITY: ${{ secrets.APP_ACTIVITY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Appium + Drivers
        run: |
          npm install -g appium
          appium driver install uiautomator2
          appium -v
      - name: Start Appium Server
        run: |
          appium --address 127.0.0.1 --port 4723 > appium.log 2>&1 &
          sleep 5  # give server time to boo

      - name: Start Emulator & Run Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          arch: x86_64
          profile: pixel_5
          target: 'default'
          emulator-options: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
          disable-animations: true
          script: |
            # More robust wait for emulator
            MAX_TRIES=30
            COUNT=0
            while [ $COUNT -lt $MAX_TRIES ]; do
              echo "Waiting for emulator to start (attempt: $COUNT)"
              STATUS=$(adb devices | grep emulator | grep device)
              if [ ! -z "$STATUS" ]; then
                echo "Emulator is online!"
                break
              fi
              sleep 10
              COUNT=$((COUNT+1))
            done
            
            if [ $COUNT -eq $MAX_TRIES ]; then
              echo "Emulator failed to start."
              exit 1
            fi
            
            # Wait for boot to complete
            adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 5; echo "Waiting for boot to complete..."; done; echo "Boot completed"'
            
            # Give additional time for system services to stabilize
            sleep 20
            
            # Run actual tests
            mvn -B test

      - name: Upload Surefire Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports
          path: target/surefire-reports/
